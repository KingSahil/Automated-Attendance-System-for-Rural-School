{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Text, Card, Button, Divider } from 'react-native-paper';\nimport QRCode from 'react-native-qrcode-svg';\nimport * as Print from 'expo-print';\nimport * as Sharing from 'expo-sharing';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function QRGenerator(_ref) {\n  var students = _ref.students,\n    visible = _ref.visible,\n    onClose = _ref.onClose;\n  if (!visible) {\n    return null;\n  }\n  var generateQRData = function generateQRData(student) {\n    return JSON.stringify({\n      type: 'student_qr',\n      id: student.id,\n      name: student.name,\n      rollNumber: student.rollNumber,\n      class: student.class,\n      timestamp: Date.now()\n    });\n  };\n  var generatePDF = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var qrCodesHTML = yield Promise.all(students.map(function () {\n          var _ref3 = _asyncToGenerator(function* (student) {\n            return `\n        <div style=\"page-break-inside: avoid; margin: 20px; padding: 20px; border: 1px solid #ccc; display: inline-block; width: 300px; text-align: center;\">\n          <h3>${student.name}</h3>\n          <p>Roll No: ${student.rollNumber}</p>\n          <p>Class: ${student.class}</p>\n          <div style=\"margin: 20px 0;\">\n            <div style=\"width: 150px; height: 150px; border: 2px solid #000; margin: 0 auto; display: flex; align-items: center; justify-content: center;\">\n              QR Code for ${student.rollNumber}\n            </div>\n          </div>\n          <p style=\"font-size: 12px; color: #666;\">Scan to mark attendance</p>\n        </div>\n      `;\n          });\n          return function (_x) {\n            return _ref3.apply(this, arguments);\n          };\n        }()));\n        var html = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>Student QR Codes</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .header { text-align: center; margin-bottom: 30px; }\n            .qr-grid { display: flex; flex-wrap: wrap; justify-content: center; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>Student QR Codes</h1>\n            <p>Generated on ${new Date().toLocaleDateString()}</p>\n          </div>\n          <div class=\"qr-grid\">\n            ${qrCodesHTML.join('')}\n          </div>\n        </body>\n        </html>\n      `;\n        var _yield$Print$printToF = yield Print.printToFileAsync({\n            html: html\n          }),\n          uri = _yield$Print$printToF.uri;\n        if (yield Sharing.isAvailableAsync()) {\n          yield Sharing.shareAsync(uri);\n        } else {\n          Alert.alert('Success', 'QR codes generated successfully!');\n        }\n      } catch (error) {\n        Alert.alert('Error', 'Failed to generate PDF: ' + error.message);\n      }\n    });\n    return function generatePDF() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getQRCodeBase64 = function getQRCodeBase64(student) {\n    return new Promise(function (resolve) {\n      resolve('');\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Card, {\n      style: styles.headerCard,\n      children: _jsxs(Card.Content, {\n        children: [_jsxs(View, {\n          style: styles.header,\n          children: [_jsx(Text, {\n            variant: \"headlineSmall\",\n            children: \"QR Code Generator\"\n          }), _jsx(Button, {\n            mode: \"outlined\",\n            onPress: onClose,\n            children: \"Close\"\n          })]\n        }), _jsx(Text, {\n          variant: \"bodyMedium\",\n          children: \"Generate QR codes for all students to enable quick attendance scanning.\"\n        })]\n      })\n    }), _jsx(ScrollView, {\n      style: styles.scrollView,\n      children: students.map(function (student) {\n        return _jsx(Card, {\n          style: styles.studentCard,\n          children: _jsx(Card.Content, {\n            children: _jsxs(View, {\n              style: styles.studentInfo,\n              children: [_jsxs(View, {\n                style: styles.textInfo,\n                children: [_jsx(Text, {\n                  variant: \"titleMedium\",\n                  children: student.name\n                }), _jsxs(Text, {\n                  variant: \"bodyMedium\",\n                  children: [\"Roll No: \", student.rollNumber]\n                }), _jsxs(Text, {\n                  variant: \"bodySmall\",\n                  children: [\"Class: \", student.class]\n                })]\n              }), _jsx(View, {\n                style: styles.qrContainer,\n                children: _jsx(QRCode, {\n                  value: generateQRData(student),\n                  size: 80,\n                  color: \"#FFFFFF\",\n                  backgroundColor: \"#1E1E1E\"\n                })\n              })]\n            })\n          })\n        }, student.id);\n      })\n    }), _jsx(View, {\n      style: styles.footer,\n      children: _jsx(Button, {\n        mode: \"contained\",\n        onPress: generatePDF,\n        style: styles.generateButton,\n        icon: \"download\",\n        children: \"Generate PDF with All QR Codes\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#121212'\n  },\n  headerCard: {\n    margin: 16,\n    backgroundColor: '#1E1E1E'\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8\n  },\n  scrollView: {\n    flex: 1,\n    paddingHorizontal: 16\n  },\n  studentCard: {\n    marginBottom: 12,\n    backgroundColor: '#1E1E1E'\n  },\n  studentInfo: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  textInfo: {\n    flex: 1\n  },\n  qrContainer: {\n    marginLeft: 16\n  },\n  footer: {\n    padding: 16\n  },\n  generateButton: {\n    backgroundColor: '#90CAF9'\n  }\n});","map":{"version":3,"names":["React","View","StyleSheet","ScrollView","Alert","Text","Card","Button","Divider","QRCode","Print","Sharing","jsx","_jsx","jsxs","_jsxs","QRGenerator","_ref","students","visible","onClose","generateQRData","student","JSON","stringify","type","id","name","rollNumber","class","timestamp","Date","now","generatePDF","_ref2","_asyncToGenerator","qrCodesHTML","Promise","all","map","_ref3","_x","apply","arguments","html","toLocaleDateString","join","_yield$Print$printToF","printToFileAsync","uri","isAvailableAsync","shareAsync","alert","error","message","getQRCodeBase64","resolve","style","styles","container","children","headerCard","Content","header","variant","mode","onPress","scrollView","studentCard","studentInfo","textInfo","qrContainer","value","size","color","backgroundColor","footer","generateButton","icon","create","flex","margin","flexDirection","justifyContent","alignItems","marginBottom","paddingHorizontal","marginLeft","padding"],"sources":["C:/Users/aanch/rural attendance/rural attendance android app/src/components/QRGenerator.js"],"sourcesContent":["import React from 'react';\r\nimport { View, StyleSheet, ScrollView, Alert } from 'react-native';\r\nimport { Text, Card, Button, Divider } from 'react-native-paper';\r\nimport QRCode from 'react-native-qrcode-svg';\r\nimport * as Print from 'expo-print';\r\nimport * as Sharing from 'expo-sharing';\r\n\r\nexport default function QRGenerator({ students, visible, onClose }) {\r\n  if (!visible) {\r\n    return null;\r\n  }\r\n\r\n  const generateQRData = (student) => {\r\n    return JSON.stringify({\r\n      type: 'student_qr',\r\n      id: student.id,\r\n      name: student.name,\r\n      rollNumber: student.rollNumber,\r\n      class: student.class,\r\n      timestamp: Date.now()\r\n    });\r\n  };\r\n\r\n  const generatePDF = async () => {\r\n    try {\r\n      const qrCodesHTML = await Promise.all(students.map(async (student) => `\r\n        <div style=\"page-break-inside: avoid; margin: 20px; padding: 20px; border: 1px solid #ccc; display: inline-block; width: 300px; text-align: center;\">\r\n          <h3>${student.name}</h3>\r\n          <p>Roll No: ${student.rollNumber}</p>\r\n          <p>Class: ${student.class}</p>\r\n          <div style=\"margin: 20px 0;\">\r\n            <div style=\"width: 150px; height: 150px; border: 2px solid #000; margin: 0 auto; display: flex; align-items: center; justify-content: center;\">\r\n              QR Code for ${student.rollNumber}\r\n            </div>\r\n          </div>\r\n          <p style=\"font-size: 12px; color: #666;\">Scan to mark attendance</p>\r\n        </div>\r\n      `));\r\n\r\n      const html = `\r\n        <!DOCTYPE html>\r\n        <html>\r\n        <head>\r\n          <meta charset=\"utf-8\">\r\n          <title>Student QR Codes</title>\r\n          <style>\r\n            body { font-family: Arial, sans-serif; margin: 20px; }\r\n            .header { text-align: center; margin-bottom: 30px; }\r\n            .qr-grid { display: flex; flex-wrap: wrap; justify-content: center; }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div class=\"header\">\r\n            <h1>Student QR Codes</h1>\r\n            <p>Generated on ${new Date().toLocaleDateString()}</p>\r\n          </div>\r\n          <div class=\"qr-grid\">\r\n            ${qrCodesHTML.join('')}\r\n          </div>\r\n        </body>\r\n        </html>\r\n      `;\r\n\r\n      const { uri } = await Print.printToFileAsync({ html });\r\n      \r\n      if (await Sharing.isAvailableAsync()) {\r\n        await Sharing.shareAsync(uri);\r\n      } else {\r\n        Alert.alert('Success', 'QR codes generated successfully!');\r\n      }\r\n    } catch (error) {\r\n      Alert.alert('Error', 'Failed to generate PDF: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const getQRCodeBase64 = (student) => {\r\n    return new Promise((resolve) => {\r\n      // This would need to be implemented with a proper QR code to base64 converter\r\n      // For now, we'll use a placeholder\r\n      resolve('');\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Card style={styles.headerCard}>\r\n        <Card.Content>\r\n          <View style={styles.header}>\r\n            <Text variant=\"headlineSmall\">QR Code Generator</Text>\r\n            <Button mode=\"outlined\" onPress={onClose}>\r\n              Close\r\n            </Button>\r\n          </View>\r\n          <Text variant=\"bodyMedium\">\r\n            Generate QR codes for all students to enable quick attendance scanning.\r\n          </Text>\r\n        </Card.Content>\r\n      </Card>\r\n\r\n      <ScrollView style={styles.scrollView}>\r\n        {students.map((student) => (\r\n          <Card key={student.id} style={styles.studentCard}>\r\n            <Card.Content>\r\n              <View style={styles.studentInfo}>\r\n                <View style={styles.textInfo}>\r\n                  <Text variant=\"titleMedium\">{student.name}</Text>\r\n                  <Text variant=\"bodyMedium\">Roll No: {student.rollNumber}</Text>\r\n                  <Text variant=\"bodySmall\">Class: {student.class}</Text>\r\n                </View>\r\n                <View style={styles.qrContainer}>\r\n                  <QRCode\r\n                    value={generateQRData(student)}\r\n                    size={80}\r\n                    color=\"#FFFFFF\"\r\n                    backgroundColor=\"#1E1E1E\"\r\n                  />\r\n                </View>\r\n              </View>\r\n            </Card.Content>\r\n          </Card>\r\n        ))}\r\n      </ScrollView>\r\n\r\n      <View style={styles.footer}>\r\n        <Button\r\n          mode=\"contained\"\r\n          onPress={generatePDF}\r\n          style={styles.generateButton}\r\n          icon=\"download\"\r\n        >\r\n          Generate PDF with All QR Codes\r\n        </Button>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#121212',\r\n  },\r\n  headerCard: {\r\n    margin: 16,\r\n    backgroundColor: '#1E1E1E',\r\n  },\r\n  header: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 8,\r\n  },\r\n  scrollView: {\r\n    flex: 1,\r\n    paddingHorizontal: 16,\r\n  },\r\n  studentCard: {\r\n    marginBottom: 12,\r\n    backgroundColor: '#1E1E1E',\r\n  },\r\n  studentInfo: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n  textInfo: {\r\n    flex: 1,\r\n  },\r\n  qrContainer: {\r\n    marginLeft: 16,\r\n  },\r\n  footer: {\r\n    padding: 16,\r\n  },\r\n  generateButton: {\r\n    backgroundColor: '#90CAF9',\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}